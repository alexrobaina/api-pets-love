// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  role                 Role?
  socialMedia          Json?
  firstName            String?
  lastName             String?
  locationId           String?
  location             Location?              @relation(fields: [locationId], references: [id])
  image                String?
  description          String?
  username             String?                @unique
  email                String                 @unique
  updatedAt            DateTime               @updatedAt
  createdAt            DateTime               @default(now())
  adoptedPets          Pet[]                  @relation("AdoptedPets")
  ShelterPets          Pet[]                  @relation("ShelterPets")
  PetsCaredByVolunteer PetsCaredByVolunteer[]
  MedicalRecord        MedicalRecord[]
  Pet                  Pet[]
  Appointment          Appointment[]
  Team                 Team[]
  TeamMembership       TeamMembership[]
  Inventory            Inventory[]
  Expense              Expense[]
}

model Location {
  id        String   @id @default(cuid())
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  lat       Float?
  lng       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  Pet       Pet[]
}

model Pet {
  id                   String                 @id @default(cuid())
  name                 String
  category             String
  weight               String?
  breed                String?
  description          String?
  size                 String // Toy / Kitten, Small, Medium, Large, extra large
  gender               String
  adopted              Boolean                @default(false)
  images               String[]
  locationId           String?
  age                  String // Baby, Young, Adult, Senior
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  qrCode               String?
  adoptedBy            String? // Foreign Key for A dopter
  shelterId            String? // Foreign Key for Shelter
  createdBy            String? // Foreign Key for Volunteer
  vetId                String? // Foreign Key for Vet
  Vet                  User?                  @relation(fields: [vetId], references: [id])
  location             Location?              @relation(fields: [locationId], references: [id])
  Adopter              User?                  @relation(name: "AdoptedPets", fields: [adoptedBy], references: [id])
  Shelter              User?                  @relation(name: "ShelterPets", fields: [shelterId], references: [id])
  PetsCaredByVolunteer PetsCaredByVolunteer[]
  MedicalRecord        MedicalRecord[]
  PetVaccine           PetVaccine[]
  Appointment          Appointment[]
}

// This is the relation table for the many-to-many relationship between Pet and User (for volunteers)
model PetsCaredByVolunteer {
  petId  String
  userId String
  pet    Pet    @relation(fields: [petId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([petId, userId])
}

model PetVaccine {
  id        String        @id @default(cuid())
  petId     String        @map("pet_id")
  vaccineId String        @map("vaccine_id")
  status    VaccineStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  files     String[]

  Pet     Pet     @relation(fields: [petId], references: [id])
  Vaccine Vaccine @relation(fields: [vaccineId], references: [id])
}

model Vaccine {
  id          String       @id @default(cuid())
  name        String
  description String
  category    String // cat, dog, bird, etc.
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  PetVaccines PetVaccine[]
}

model MedicalRecord {
  id               String    @id @default(cuid())
  petId            String
  private          Boolean   @default(false)
  Pet              Pet       @relation(fields: [petId], references: [id])
  date             DateTime  @default(now())
  title            String // Title of the visit/appointment
  description      String // Brief description or reason for the visit/appointment
  diagnosis        String? // Diagnosis made by the veterinarian
  treatment        String? // Treatment provided or prescribed
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime? // Scheduled date for follow-up, if required
  vetId            String? // Foreign key for the veterinarian
  clinicName       String? // Name of the clinic/hospital
  notes            String? // Additional notes or observations
  attachments      String[] // URLs or paths to any attached documents, X-rays, images etc.
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Vet              User?     @relation(fields: [vetId], references: [id])
}

model Product {
  id          String    @id @default(uuid())
  title       String
  subTitle    String
  description String
  price       String
  redirect    String
  image       String
  peaks       String[]
  donationId  String?
  Donation    Donation? @relation(fields: [donationId], references: [id])
}

model Donation {
  id           String    @id @default(uuid())
  email        String?
  productId    String
  order        Int       @default(autoincrement())
  approved     Boolean   @default(false)
  preferenceId String?   @unique
  Products     Product[]
}

enum Role {
  ADOPTER
  VOLUNTEER
  VET
  SHELTER
  ADMIN
}

enum VaccineStatus {
  DONE
  PENDING
  NOT_APPLICABLE
}

model Appointment {
  id             String          @id @default(cuid())
  title          String
  description    String?
  endDate        DateTime
  startDate      DateTime
  recurring      Boolean         @default(false)
  recurrenceType RecurrenceType? // DAILY, WEEKLY, MONTHLY, YEARLY
  recipientId    String? // ID of the recipient of the appointment
  ownerId        String? // ID of the owner who created the appointment
  petId          String? // ID of the pet involved in the appointment
  pet            Pet?            @relation(fields: [petId], references: [id])
  createdAt      DateTime        @default(now())
  User           User?           @relation(fields: [ownerId], references: [id])
}

model Team {
  id        String           @id @default(cuid())
  name      String
  createdBy String // Foreign key for the user who created the team
  creator   User             @relation(fields: [createdBy], references: [id])
  members   TeamMembership[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TeamMembership {
  teamId String
  userId String
  role   TeamRole @default(MEMBER)
  team   Team     @relation(fields: [teamId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
}

model Inventory {
  id          String        @id @default(uuid())
  name        String
  type        InventoryType
  description String?
  quantity    Int
  price       Float
  images      String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  ExpenseItem ExpenseItem[]
}

model ExpenseItem {
  id          String     @id @default(uuid())
  title       String
  quantity    Int
  price       Float
  expenseId   String
  expense     Expense    @relation(fields: [expenseId], references: [id])
  inventoryId String? // Optional field to link with inventory
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
}

model Expense {
  id          String        @id @default(uuid())
  totalAmount Float
  date        DateTime      @default(now())
  type        ExpenseType
  category    String
  title       String
  description String?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  items       ExpenseItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ExpenseType {
  INCOME
  EXPENSE
}

enum TeamRole {
  MEMBER
  ADMIN
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum InventoryType {
  MEDICINE
  FOOD
  TOYS
  ACCESSORIES
  HEALTH_WELLNESS
  HOUSING
  LITTER_WASTE_MANAGEMENT
  APPAREL
  FEEDING_SUPPLIES
  TRAVEL_OUTDOOR
  TRAINING_BEHAVIOR
}
